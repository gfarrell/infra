---
version: '3'
services:

  nginx:
    build: ./nginx
    depends_on:
      - mailman-web
      - drone-ci
    networks:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/www:/var/www
      - /etc/letsencrypt:/var/www-secure

  pg:
    image: postgres:11-alpine
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    environment:
      POSTGRES_DB: mailman
      POSTGRES_USER: "${PG_USER}"
      POSTGRES_PASSWORD: "${PG_PASS}"

  mailman-core:
    image: quay.io/maxking/mailman-core:0.2
    volumes:
      - mm-core-data:/opt/mailman
    depends_on:
      - pg
      - exim
    networks:
      - backend
    environment:
      MTA: "exim"
      MM_HOSTNAME: "mailman-core"
      SMTP_HOST: "exim"
      HYPERKITTY_API_KEY: "${HYPERKITTY_API_KEY}"
      DATABASE_URL: "postgres://${PG_USER}:${PG_PASS}@pg:5432/mailman"
      DATABASE_TYPE: "postgres"
      DATABASE_CLASS: "mailman.database.postgresql.PostgreSQLDatabase"

  mailman-web:
    image: quay.io/maxking/mailman-web:0.2
    volumes:
      - mm-web-data:/opt/mailman-web-data
    networks:
      - backend
    environment:
      UWSGI_STATIC_MAP: /static=/opt/mailman-web-data/static
      SERVE_FROM_DOMAIN: mailman.gtf.io
      HYPERKITTY_API_KEY: "${HYPERKITTY_API_KEY}"
      MAILMAN_ADMIN_USER: "${MAILMAN_ADMIN_USER}"
      MAILMAN_ADMIN_EMAIL: "${MAILMAN_ADMIN_EMAIL}"
      SECRET_KEY: "${MAILMAN_SECRET_KEY}"
      DATABASE_URL: "postgres://${PG_USER}:${PG_PASS}@pg:5432/mailman"
      SMTP_HOST: "exim"

  exim:
    build: ./exim
    # TODO: enable this option (need to upgrade docker on the server)
    # exim spawns lots of processes, let's reap 'em
    # https://docs.docker.com/compose/compose-file/#init
    # init: true
    networks:
      - backend
    volumes:
      # exim4 needs access to the mailman binaries apparently
      # https://mailman.readthedocs.io/en/release-3.0/src/mailman/docs/MTA.html
      - mm-core-data:/opt/mailman/core
      # for DKIM keys
      - /var/secure/exim-keys:/var/secure/exim-keys
    ports:
      - "25:25"

  drone-ci:
    image: drone/drone:1
    networks:
      - backend
    volumes:
      - drone-ci-data:/data
      # Drone needs to be able to use docker
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DRONE_USER_CREATE: "username:${CI_USER},machine:false,admin:true"
      DRONE_USER_FILTER: "${CI_USER}"
      DRONE_GITHUB_SERVER: https://github.com
      DRONE_GITHUB_CLIENT_ID: "${GH_CLIENT_ID}"
      DRONE_GITHUB_CLIENT_SECRET: "${GH_CLIENT_SECRET}"
      DRONE_RUNNER_CAPACITY: 2
      DRONE_SERVER_HOST: ci.gtf.io
      # we'll front this with nginx so use http interally
      DRONE_SERVER_PROTOCOL: http

networks:
  backend:
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  db-data:
  mm-core-data:
  mm-web-data:
  drone-ci-data:
